{"version":3,"sources":["components/card/Card.jsx","components/card-list/CardList.jsx","components/search-box/SearchBox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","name","id","email","className","src","alt","CardList","props","monsters","map","SearchBox","placeholder","handleChange","onChange","type","App","state","searchField","bind","e","this","setState","target","value","a","fetch","response","json","result","filterMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wVAaeA,EAXF,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACNC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,GAAIC,EAAUH,EAAVG,MAClB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAG,+BAA0BH,EAA1B,aAAyCI,IAAI,iBACrD,6BAAKL,IACL,4BAAIE,QCKKI,G,MAVE,SAACC,GAChB,OACE,qBAAKJ,UAAU,YAAf,SACGI,EAAMC,SAASC,KAAI,SAACV,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQE,WCMZS,G,MAXG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,OACE,uBACET,UAAU,SACVU,SAAUD,EACVE,KAAK,SACLH,YAAaA,MC+BJI,G,wDAjCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IAEf,EAAKL,aAAe,EAAKA,aAAaM,KAAlB,gBANR,E,gDAQd,SAAaC,GACXC,KAAKC,SAAS,CAAEJ,YAAaE,EAAEG,OAAOC,U,sEAExC,8BAAAC,EAAA,sEACyBC,MAAM,8CAD/B,cACQC,EADR,gBAEuBA,EAASC,OAFhC,OAEQC,EAFR,OAGER,KAAKC,SAAS,CAAEb,SAAUoB,IAH5B,gD,0EAKA,WAAU,IAAD,EAC2BR,KAAKJ,MAA/BR,EADD,EACCA,SAAUS,EADX,EACWA,YACZY,EAAiBrB,EAASsB,QAAO,SAAC/B,GAAD,OACrCA,EAAQC,KAAK+B,cAAcC,SAASf,EAAYc,kBAElD,OACE,sBAAK5B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEQ,YAAY,kBACZC,aAAcQ,KAAKR,eAErB,cAAC,EAAD,CAAUJ,SAAUqB,W,GA7BVI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.624fc770.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\nconst Card = ({ monster }) => {\r\n  const { name, id, email } = monster;\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img src={`https://robohash.org/${id}?set=set2`} alt=\"monsterimage\" />\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"../card/Card\";\r\nimport \"./CardList.css\";\r\nconst CardList = (props) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monsters.map((monster) => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport \"./SearchBox.css\";\r\nconst SearchBox = ({ placeholder, handleChange }) => {\r\n  return (\r\n    <input\r\n      className=\"search\"\r\n      onChange={handleChange}\r\n      type=\"search\"\r\n      placeholder={placeholder}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\nimport CardList from \"./components/card-list/CardList\";\nimport SearchBox from \"./components/search-box/SearchBox\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    this.setState({ searchField: e.target.value });\n  }\n  async componentDidMount() {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const result = await response.json();\n    this.setState({ monsters: result });\n  }\n  render() {\n    const { monsters, searchField } = this.state;\n    const filterMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder=\"Search Monsters\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filterMonsters} />\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}